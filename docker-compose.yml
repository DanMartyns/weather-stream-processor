services:
  zookeeper:
    image: zookeeper:3.7.1
    container_name: zookeeper_weather_stream_container
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_PEER_PORT: 2888
      ZOOKEEPER_LEADER_PORT: 3888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: "localhost:2888:3888"
      ZOO_DATA_DIR: /data  # Directory where the Zookeeper will store data

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    container_name: kafka_weather_stream_container
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  postgres:
    image: postgres:latest
    container_name: postgres_weather_stream_container
    restart: always
    environment:
      POSTGRES_DB: weather_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  spark-master:
    image: bitnami/spark:latest
    container_name: spark_master_weather_stream_container
    ports:
      - "8080:8080"
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark_worker_weather_stream_container
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    depends_on:
      - spark-master

  weather_stream:
    container_name: weather_stream_container
    build: .
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=weather_data
      - KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer
      - KAFKA_PRODUCER_VALUE_SERIALIZER=org.apache.kafka.common.serialization.ByteArraySerializer
      - KAFKA_PRODUCER_ACKS=all
      - KAFKA_PRODUCER_COMPRESSION_TYPE=gzip
      - KAFKA_PRODUCER_RETRIES=5
      - KAFKA_PRODUCER_MAX_IN_FLIGHT_REQUESTS=5
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - LAT=52.084516
      - LON=5.115539
      - POSTGRES_DB=weather_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - kafka

  weather_processor:
    container_name: processing_weather_stream_container
    build: .
    depends_on:
      - kafka
      - spark-master
      - spark-worker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: weather_data
    command: >
      spark-submit
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.2.1
      /app/weather_processor.py
    restart: always
    links:
      - kafka
